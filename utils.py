import os
import sqlite3
from dotenv import load_dotenv
from openai import OpenAI

# Load environment variables
load_dotenv()

OpenAI.api_key = os.getenv("OPENAI_API_KEY")

client = OpenAI()

def generate_sql_query(natural_language_query: str) -> str:
    """
    Generate SQL query from natural language using GPT-4.

    Args:
        natural_query: Natural language query string
        
    Returns:
        Generated SQL query string

    """
    schema_details = """You are a highly skilled SQL query generator specialized in SQLite. The database 'data.db' has the following schema:
    1. Products:
    - ProductID
    - Name (Name of product)
    - Category1 (Men, Women, Kids)
    - Category2 (Sandals, Casual Shoes, Boots, Sports Shoes)

    2. Transactions:
    - StoreID
    - ProductID
    - Quantity
    - PricePerQuantity
    - Timestamp (Year, Month, Day hour:minute:second)

    3. Stores:
    - StoreID
    - State (two-letter code, e.g., NY, IL, TX)//give all of them
    - ZipCode

    Based on the above schema, convert the given natural language query into a valid,
    efficient SQL query. IMPORTANT: Only generate read-only SQL queries. If user ask something 
    Return only the SQL code as plain text without any markdown formatting, code fences, or additional text."""

    prompt = (
        "You are a highly skilled SQL query generator specialized in SQLite. "
         f"{schema_details} "
        "Based on the above schema, convert the following natural language query into a valid, efficient SQL query. "
        "Return only the SQL code as plain text without any markdown formatting, code fences, or additional text. "
        f"Natural language query: '{natural_language_query}'"
    )
    response = client.chat.completions.create(
        model="gpt-4o",
        messages=[{"role": "system", "content": prompt}],
        temperature=0,
    )
    return response.choices[0].message.content.strip()

def execute_sql_query(sql: str) -> list[dict[str, str]]:
    """
    Execute SQL query against SQLite database (read-only queries only).
    
    Args:
        sql: SQL query to execute
        
    Returns:
        List of dictionaries containing query results
        
    Raises:
        ValueError: If the SQL query is not read-only.
    """
    sql_lower = sql.strip().lower()
    if not (sql_lower.startswith("select") or sql_lower.startswith("with") or sql_lower.startswith("explain")):
        raise ValueError("Only read-only queries are allowed.")
    
    try:
        conn = sqlite3.connect("data.db")
        conn.row_factory = sqlite3.Row
        cursor = conn.cursor()

        cursor.execute(sql)
        rows = cursor.fetchall()

        columns = [col[0] for col in cursor.description]
        results = [dict(zip(columns, row)) for row in rows]

        return results
    finally:
        conn.close()

def generate_explanation(natural_language_query: str) -> str:
    """
    Generate an explanation from GPT on why write operations are not permitted.
    
    Args:
        natural_language_query: The original natural language query that requested a write operation.
    
    Returns:
        A plain text explanation generated by GPT.
    """
    prompt = (
        "The following query request attempts to modify the database, which is not permitted: "
        f"'{natural_language_query}'. Explain clearly and concisely why write operations (such as DELETE, UPDATE, "
        "INSERT, DROP, etc.) are not allowed, and that only read-only operations (like SELECT queries) are permitted."
    )
    
    response = client.chat.completions.create(
        model="gpt-4o",
        messages=[{"role": "system", "content": prompt}],
        temperature=0,
    )
    return response.choices[0].message.content.strip()